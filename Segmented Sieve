#include<bits/stdc++.h>
using namespace std;
   
#define ff              first
#define ss              second
#define ll 				long long
// #define int   			long long int
#define pb              push_back
#define mp              make_pair
#define mt              make_tuple
#define pii             pair<int,int>
#define vi              vector<int>
#define vlli            vector<long long int>
#define mii             map<int,int>
#define pqb             priority_queue<int>
#define pqs             priority_queue<int,vi,greater<int> 
#define setbits(x)      __builtin_popcountll(x)
#define mod             1000000007
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define range(a,b)      substr(a,b-a+1)
#define w(x)            int x; cin>>x; while(x--)
#define trace(x)        cerr<<#x<<": "<<x<<" "<<endl;
#define FIO             ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count()); 

#define MAX 1000005
bitset<MAX>isPrime;
vector<int>primes;
void genPrimes() {
	isPrime.set();
	isPrime[0]=isPrime[1]=0;
	for(long long i=2;i*i<=MAX;i++) {
		if(isPrime[i]) {
			for(long long j = i*i;j<=MAX;j+=i)
				isPrime[j]=0;
		}
	}
	primes.pb(2);
	for(int i=3;i<=MAX;i+=2) {
		if(isPrime[i]) primes.pb(i);
	}
}

void segmentedSieve(long l, long r) {
	if(l==1) l++; // 1 neither prime nor composite

	// create a dummy array of length r-l+1 to cut short the range
	// make all elements 1
	vector<bool>segSieve(r-l+1,1);

	int i=0;
 	while(primes[i]*primes[i] <= r) { // primes till root r

 		long long pr = primes[i];
 		long firstMultiple = int((l/pr))*pr; // firstMultiple of pr closer to l
 		if(firstMultiple < l) firstMultiple+=pr;
 		// go to every multiple and make them false
 		for(int j = firstMultiple; j<=r; j+=pr) {
 			if(j!=pr) { // when firstMultiple becomes equal to primeNo.
 				segSieve[j - l] = 0;
 			}
 		}
 		++i;
	}
	for(int i=l;i<=r;i++) if(segSieve[i-l]) cout<<i<<"\n";
}

int32_t main(){
	FIO;
    #ifndef ONLINE_JUDGE
	freopen("input1.txt", "r", stdin);
	freopen("output1.txt", "w", stdout);
    #endif
	genPrimes();
	int t;
	cin>>t;
	while(t--) {
		int l, r;
		cin>>l>>r;
		segmentedSieve(l,r);
		cout<<"\n";
	}
	return 0;
}	
